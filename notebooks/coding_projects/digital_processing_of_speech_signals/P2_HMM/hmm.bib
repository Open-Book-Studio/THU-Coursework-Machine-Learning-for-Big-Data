@book{LiHang_2019, title={统计学习方法 (第2版)}, ISBN={978-7-302-51727-6}, url={https://book.douban.com/subject/33437381/}, publisher={<a href="https://book.douban.com/press/2562">清华大学出版社</a>    <br>                                                      <span class="pl">出版年:</span> 2019-5}, author={李航}, year={2019}, month=may, language={zh} }
@book{LiHang_2022, title={机器学习方法}, ISBN={978-7-302-59730-8}, url={https://book.douban.com/subject/35884788/}, abstractNote={机器学习是以概率论、统计学、信息论、最优化理论、计算理论等为基础的计算机应用理论学科，也是人工智能、数据挖掘等领域的基础学科。, 《机器学习方法》全面系统地介绍了机器学习的主要方法，共分三篇。第一篇介绍监督学习的主要方法，包括感知机、k近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归与最大熵模型、支持向量机、Boosting、EM算法、隐马尔可夫模型、条件随机场等；第二篇介绍无监督学习的主要方法，包括聚类、奇异值分解、主成分分析、潜在语义分析、概率潜在语义分析、马尔可夫链蒙特卡罗法、潜在狄利克雷分配、PageRank 算法等。第三篇介绍深度学习的主要方法，包括前馈神经网络、卷积神经网络、循环神经网络、序列到序列模型、预训练语言模型、生成对抗网络等。, 书中每章介绍一两种机器学习方法，详细叙述各个方法的模型、策略和算法。从具体例子入手，由浅入深，帮助读者直观地理..., (展开全部), 李航，字节跳动科技有限公司人工智能实验室总监，IEEE会士、ACL会士、ACM杰出科学家、CCF杰出会员。研究方向包括信息检索、自然语言处理、统计机器学习及数据挖掘。, 李航于1988年从日本京都大学电气工程系毕业，1998年获得日本东京大学计算机科学博士。他1990年至2001年就职于日本NEC公司中央研究所，任研究员；2001年至2012年就职于微软亚洲研究院，任高级研究员与主任研究员；2012年至2017年就职于华为技术有限公司诺亚方舟实验室，任首席科学家、主任。, 李航一直活跃在相关学术领域，曾出版过四部学术专著，并在国际学术会议和国际学术期刊上发表过120多篇学术论文，包括 SIGIR、WWW、WSDM、ACL、EMNLP、ICML、NIPS、SIGKDD、AAAI、IJCAI，以及 NLE、JMLR、TOIS、IRJ、IPM、TKDE、TWE..., (展开全部)}, publisher={<a href="https://book.douban.com/press/2562">清华大学出版社</a>    <br>                                                      <span class="pl">出版年:</span> 2022-3}, author={李航}, year={2022}, month=mar, language={zh} }
@article{Rabiner_1989, title={A tutorial on hidden Markov models and selected applications in speech recognition}, volume={77}, ISSN={1558-2256}, DOI={10.1109/5.18626}, abstractNote={This tutorial provides an overview of the basic theory of hidden Markov models (HMMs) as originated by L.E. Baum and T. Petrie (1966) and gives practical details on methods of implementation of the theory along with a description of selected applications of the theory to distinct problems in speech recognition. Results from a number of original sources are combined to provide a single source of acquiring the background required to pursue further this area of research. The author first reviews the theory of discrete Markov chains and shows how the concept of hidden states, where the observation is a probabilistic function of the state, can be used effectively. The theory is illustrated with two simple examples, namely coin-tossing, and the classic balls-in-urns system. Three fundamental problems of HMMs are noted and several practical techniques for solving these problems are given. The various types of HMMs that have been studied, including ergodic as well as left-right models, are described.<>}, note={14240 citations (Crossref) [2024-12-07]}, number={2}, journal={Proceedings of the IEEE}, author={Rabiner, L.R.}, year={1989}, month=feb, pages={257–286}, language={en} }
@inproceedings{Zhang_2024, title={Adaptable Logical Control for Large Language Models}, url={https://openreview.net/forum?id=58X9v92zRd&referrer=%5Bthe%20profile%20of%20Honghua%20Zhang%5D(%2Fprofile%3Fid%3D~Honghua_Zhang1)}, abstractNote={Despite the success of Large Language Models (LLMs) on various tasks following human instructions, controlling model generation to follow strict constraints at inference time poses a persistent challenge. In this paper, we introduce Ctrl-G, a neuro-symbolic framework that enables tractable and adaptable control of LLM generation to follow logical constraints reliably. Ctrl-G combines any production-ready LLM with a Hidden Markov Model (HMM), guiding LLM outputs to adhere to logical constraints represented as deterministic finite automata. We show that Ctrl-G, when a TULU2-7B model is coupled with a 2B-parameter HMM, outperforms GPT4 in text editing: on the task of generating text insertions/continuations following logical constraints, our approach achieves over 30% higher satisfaction rate in human evaluation. When applied to medium-size language models (e.g., GPT2-large), Ctrl-G also beats its counterparts on standard benchmarks by large margins. Additionally, as a proof-of-concept study, we use Ctrl-G to assist LLM reasoning on the GSM benchmark, foreshadowing the application of Ctrl-G, as well as other constrained generation approaches, beyond traditional language generation tasks.}, author={Zhang, Honghua and Kung, Po-Nien and Yoshida, Masahiro and Broeck, Guy Van den and Peng, Nanyun}, year={2024}, month=nov, language={en} }
@misc{Stochastic_process_2024, rights={Creative Commons Attribution-ShareAlike License}, url={https://en.wikipedia.org/w/index.php?title=Stochastic_process&oldid=1257085679}, abstractNote={In probability theory and related fields, a stochastic () or random process is a mathematical object usually defined as a family of random variables in a probability space, where the index of the family often has the interpretation of time. Stochastic processes are widely used as mathematical models of systems and phenomena that appear to vary in a random manner. Examples include the growth of a bacterial population, an electrical current fluctuating due to thermal noise, or the movement of a gas molecule. Stochastic processes have applications in many disciplines such as biology, chemistry, ecology, neuroscience, physics, image processing, signal processing, control theory, information theory, computer science, and telecommunications. Furthermore, seemingly random changes in financial markets have motivated the extensive use of stochastic processes in finance.
Applications and the study of phenomena have in turn inspired the proposal of new stochastic processes. Examples of such stochastic processes include the Wiener process or Brownian motion process, used by Louis Bachelier to study price changes on the Paris Bourse, and the Poisson process, used by A. K. Erlang to study the number of phone calls occurring in a certain period of time. These two stochastic processes are considered the most important and central in the theory of stochastic processes, and were invented repeatedly and independently, both before and after Bachelier and Erlang, in different settings and countries.
The term random function is also used to refer to a stochastic or random process, because a stochastic process can also be interpreted as a random element in a function space. The terms stochastic process and random process are used interchangeably, often with no specific mathematical space for the set that indexes the random variables. But often these two terms are used when the random variables are indexed by the integers or an interval of the real line. If the random variables are indexed by the Cartesian plane or some higher-dimensional Euclidean space, then the collection of random variables is usually called a random field instead. The values of a stochastic process are not always numbers and can be vectors or other mathematical objects.
Based on their mathematical properties, stochastic processes can be grouped into various categories, which include random walks, martingales, Markov processes, Lévy processes, Gaussian processes, random fields, renewal processes, and branching processes. The study of stochastic processes uses mathematical knowledge and techniques from probability, calculus, linear algebra, set theory, and topology as well as branches of mathematical analysis such as real analysis, measure theory, Fourier analysis, and functional analysis. The theory of stochastic processes is considered to be an important contribution to mathematics and it continues to be an active topic of research for both theoretical reasons and applications.}, note={Page Version ID: 1257085679}, journal={Wikipedia}, year={2024}, month=nov, language={en} }
@misc{Markov_chain_2024, rights={Creative Commons Attribution-ShareAlike License}, url={https://en.wikipedia.org/w/index.php?title=Markov_chain&oldid=1260423960}, abstractNote={In probability theory and statistics, a Markov chain or Markov process is a stochastic process describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event. Informally, this may be thought of as, “What happens next depends only on the state of affairs now.” A countably infinite sequence, in which the chain moves state at discrete time steps, gives a discrete-time Markov chain (DTMC). A continuous-time process is called a continuous-time Markov chain (CTMC). Markov processes are named in honor of the Russian mathematician Andrey Markov.
Markov chains have many applications as statistical models of real-world processes. They provide the basis for general stochastic simulation methods known as Markov chain Monte Carlo, which are used for simulating sampling from complex probability distributions, and have found application in areas including Bayesian statistics, biology, chemistry, economics, finance, information theory, physics, signal processing, and speech processing.
The adjectives Markovian and Markov are used to describe something that is related to a Markov process.}, note={Page Version ID: 1260423960}, journal={Wikipedia}, year={2024}, month=nov, language={en} }
@misc{Stationary_process_2024, rights={Creative Commons Attribution-ShareAlike License}, url={https://en.wikipedia.org/w/index.php?title=Stationary_process&oldid=1230037983}, abstractNote={In mathematics and statistics, a stationary process (or a strict/strictly stationary process or strong/strongly stationary process) is a stochastic process whose unconditional joint probability distribution does not change when shifted in time. Consequently, parameters such as mean and variance also do not change over time.
Since stationarity is an assumption underlying many statistical procedures used in time series analysis, non-stationary data are often transformed to become stationary. The most common cause of violation of stationarity is a trend in the mean, which can be due either to the presence of a unit root or of a deterministic trend. In the former case of a unit root, stochastic shocks have permanent effects, and the process is not mean-reverting. In the latter case of a deterministic trend, the process is called a trend-stationary process, and stochastic shocks have only transitory effects after which the variable tends toward a deterministically evolving (non-constant) mean.
A trend stationary process is not strictly stationary, but can easily be transformed into a stationary process by removing the underlying trend, which is solely a function of time. Similarly, processes with one or more unit roots can be made stationary through differencing. An important type of non-stationary process that does not include a trend-like behavior is a cyclostationary process, which is a stochastic process that varies cyclically with time.
For many applications strict-sense stationarity is too restrictive. Other forms of stationarity such as wide-sense stationarity or N-th-order stationarity are then employed. The definitions for different kinds of stationarity are not consistent among different authors (see Other terminology).}, note={Page Version ID: 1230037983}, journal={Wikipedia}, year={2024}, month=jun, language={en} }
@misc{馬可夫過程_2022, rights={Creative Commons Attribution-ShareAlike License}, url={https://zh.wikipedia.org/w/index.php?title=%E9%A6%AC%E5%8F%AF%E5%A4%AB%E9%81%8E%E7%A8%8B&oldid=75013273}, abstractNote={在概率论及统计学中，马尔可夫过程（英语：Markov process）是一个具备了马尔可夫性质的随机过程，因为俄国数学家安德雷·马尔可夫得名。马尔可夫过程是不具备记忆特质的（memorylessness）。换言之，马尔可夫过程的条件概率仅仅与系统的当前状态相关，而与它的过去历史或未来状态，都是独立、不相关的。
具备离散状态的马尔可夫过程，通常被称为马尔可夫链。马尔可夫链通常使用离散的时间集合定义，又称离散时间马尔可夫链。有些学者虽然采用这个术语，但允许时间可以取连续的值。}, note={Page Version ID: 75013273}, journal={维基百科，自由的百科全书}, year={2022}, month=dec, language={zh} }
@misc{无后效性, url={https://baike.baidu.hk/item/%E6%97%A0%E5%90%8E%E6%95%88%E6%80%A7/1135283}, abstractNote={无后效性是指如果在某个阶段上过程的状态已知，则从此阶段以后过程的发展变化仅与此阶段的状态有关，而与过程在此阶段以前的阶段所经历过的状态无关。利用动态规划方法求解多阶段决策过程问题，过程的状态必须具备无后效性。}, journal={百度百科}, language={zh} }
@misc{Optimal_substructure_2024, rights={Creative Commons Attribution-ShareAlike License}, url={https://en.wikipedia.org/w/index.php?title=Optimal_substructure&oldid=1234560167}, abstractNote={In computer science, a problem is said to have optimal substructure if an optimal solution can be constructed from optimal solutions of its subproblems. This property is used to determine the usefulness of greedy algorithms for a problem.  
Typically, a greedy algorithm is used to solve a problem with optimal substructure if it can be proven by induction that this is optimal at each step. Otherwise, provided the problem exhibits overlapping subproblems as well,  divide-and-conquer methods or dynamic programming may be used. If there are no appropriate greedy algorithms and the problem fails to exhibit overlapping subproblems, often a lengthy but straightforward search of the solution space is the best alternative.
In the application of dynamic programming to mathematical optimization, Richard Bellman’s Principle of Optimality is based on the idea that in order to solve a dynamic optimization problem from some starting period t to some ending period T, one implicitly has to solve subproblems starting from later dates s, where t<s<T. This is an example of optimal substructure. The Principle of Optimality is used to derive the Bellman equation, which shows how the value of the problem starting from t is related to the value of the problem starting from s.}, note={Page Version ID: 1234560167}, journal={Wikipedia}, year={2024}, month=jul, language={en} }
@misc{Markov_model_2024, rights={Creative Commons Attribution-ShareAlike License}, url={https://en.wikipedia.org/w/index.php?title=Markov_model&oldid=1235226510}, abstractNote={In probability theory, a Markov model is a stochastic model used to model pseudo-randomly changing systems. It is assumed that future states depend only on the current state, not on the events that occurred before it (that is, it assumes the Markov property). Generally, this assumption enables reasoning and computation with the model that would otherwise be intractable. For this reason, in the fields of predictive modelling and probabilistic forecasting, it is desirable for a given model to exhibit the Markov property.}, note={Page Version ID: 1235226510}, journal={Wikipedia}, year={2024}, month=jul, language={en} }
@misc{Probabilistic_automaton_2023, rights={Creative Commons Attribution-ShareAlike License}, url={https://en.wikipedia.org/w/index.php?title=Probabilistic_automaton&oldid=1141760291}, abstractNote={In mathematics and computer science, the probabilistic automaton (PA) is a generalization of the nondeterministic finite automaton; it includes the probability of a given transition into the transition function, turning it into a transition matrix. Thus, the probabilistic automaton also generalizes the concepts of a Markov chain and of a subshift of finite type. The languages recognized by probabilistic automata are called stochastic languages; these include the regular languages as a subset. The number of stochastic languages is uncountable.
The concept was introduced by Michael O. Rabin in 1963; a certain special case is sometimes known as the Rabin automaton (not to be confused with the subclass of ω-automata also referred to as Rabin automata). In recent years, a variant has been formulated in terms of quantum probabilities, the quantum finite automaton.}, note={Page Version ID: 1141760291}, journal={Wikipedia}, year={2023}, month=feb, language={en} }

@book{Zhou_2016, series={清华社人工智能系列}, title={机器学习}, ISBN={978-7-302-42328-7}, url={https://book.douban.com/subject/26708119/}, abstractNote={作者简介:
周志华，南京大学教授，计算机科学与技术系副主任，软件新技术国家重点实验室常务副主任，机器学习与数据挖掘研究所（LAMDA）所长，校、系学术委员会委员；ACM杰出科学家，IEEE Fellow，IAPR Fellow，中国计算机学会会士；长江学者特聘教授，国家杰出青年基金获得者。2007年创建南京大学机器学习与数据挖掘研究所（LAMDA），2010年11月任软件新技术国家重点实验室常务副主任，2013年5月任计算机系副主任。

内容简介:
机器学习是计算机科学与人工智能的重要分支领域。本书作为该领域的入门教材，在内容上尽可能涵盖机器学习基础知识的各方面。为了使尽可能多的读者通过本书对机器学习有所了解，作者试图尽可能少地使用数学知识。然而，少量的概率、统计、代数、优化、逻辑知识似乎不可避免。因此，本书更适合大学三年级以上的理工科本科生和研究生，以及具有类似背景的对机器学习感兴趣的人士。为方便读者，本书附录给出了一些相关数学基础知识简介。
全书共16章，大致分为3个部分：第1部分（第1～3章）介绍机器学习的基础知识；第2部分（第4～10章）讨论一些经典而常用的机器学习方法（决策树、神经网络、支持向量机、贝叶斯分类器、集成学习、聚类、降维与度量学习）；第3部分（第11～16章）为进阶知识，内容涉及特征选择与稀疏学习、计算学习理论、半监督学习、概率图模型、规则学习以及强化学习等。前3章之外的后续各章均相对独立，读者可根据自己的兴趣和时间情况选择使用。根据课时情况，一个学期的本科生课程可考虑讲授前9章或前10章;研究生课程则不妨使用全书。
书中除第1章外，每章都给出了十道习题。有的习题是帮助读者巩固本章学习，有的是为了引导读者扩展相关知识。一学期的一般课程可使用这些习题，再辅以两到三个针对具体数据集的大作业。带星号的习题则有相当难度，有些并无现成答案，谨供富有进取心的读者启发思考。
本书可作为高等院校计算机、自动化及相关专业的本科生或研究生教材，也可供对机器学习感兴趣的研究人员和工程技术人员阅读参考。}, note={《机器学习》;👩‍⚖️3239;🔟8.6;88.00 元;}, publisher={清华大学出版社}, author={周志华}, year={2016}, month=jan, collection={清华社人工智能系列}, language={zh-CN} }
@inproceedings{Zhang_2023, title={Tractable Control for Autoregressive Language Generation}, ISSN={2640-3498}, url={https://proceedings.mlr.press/v202/zhang23g.html}, abstractNote={Despite the success of autoregressive large language models in text generation, it remains a major challenge to generate text that satisfies complex constraints: sampling from the conditional distribution ${Pr}(text{text} | alpha)$ is intractable for even the simplest lexical constraints $alpha$. To overcome this challenge, we propose to use tractable probabilistic models (TPMs) to impose lexical constraints in autoregressive text generation models, which we refer to as GeLaTo (Generating Language with Tractable Constraints). To demonstrate the effectiveness of this framework, we use distilled hidden Markov models, where we can efficiently compute ${Pr}(text{text} | alpha)$, to guide autoregressive generation from GPT2. GeLaTo achieves state-of-the-art performance on challenging benchmarks for constrained text generation (e.g., CommonGen), beating various strong baselines by a large margin. Our work not only opens up new avenues for controlling large language models but also motivates the development of more expressive TPMs.}, booktitle={Proceedings of the 40th International Conference on Machine Learning}, publisher={PMLR}, author={Zhang, Honghua and Dang, Meihua and Peng, Nanyun and Broeck, Guy Van Den}, year={2023}, month=jul, pages={40932–40945}, language={en} }
@article{Dang_2021, title={Juice: A Julia Package for Logic and Probabilistic Circuits}, volume={35}, ISSN={2374-3468, 2159-5399}, DOI={10.1609/aaai.v35i18.17999}, abstractNote={JUICE is an open-source Julia package providing tools for logic and probabilistic reasoning and learning based on logic circuits (LCs) and probabilistic circuits (PCs). It provides a range of efﬁcient algorithms for probabilistic inference queries, such as computing marginal probabilities (MAR), as well as many more advanced queries. Certain structural circuit properties are needed to achieve this tractability, which JUICE helps validate. Additionally, it supports several parameter and structure learning algorithms proposed in the recent literature. By leveraging parallelism (on both CPU and GPU), JUICE provides a fast implementation of circuit-based algorithms, which makes it suitable for tackling large-scale datasets and models.}, number={18}, journal={Proceedings of the AAAI Conference on Artificial Intelligence}, author={Dang, Meihua and Khosravi, Pasha and Liang, Yitao and Vergari, Antonio and Van Den Broeck, Guy}, year={2021}, month=may, pages={16020–16023}, language={en} }
@inproceedings{Liu_2022, title={Scaling Up Probabilistic Circuits by Latent Variable Distillation}, url={https://openreview.net/forum?id=067CGykiZTS}, abstractNote={Probabilistic Circuits (PCs) are a unified framework for tractable probabilistic models that support efficient computation of various probabilistic queries (e.g., marginal probabilities). One key challenge is to scale PCs to model large and high-dimensional real-world datasets: we observe that as the number of parameters in PCs increases, their performance immediately plateaus. This phenomenon suggests that the existing optimizers fail to exploit the full expressive power of large PCs. We propose to overcome such bottleneck by latent variable distillation: we leverage the less tractable but more expressive deep generative models to provide extra supervision over the latent variables of PCs. Specifically, we extract information from Transformer-based generative models to assign values to latent variables of PCs, providing guidance to PC optimizers. Experiments on both image and language modeling benchmarks (e.g., ImageNet and WikiText-2) show that latent variable distillation substantially boosts the performance of large PCs compared to their counterparts without latent variable distillation. In particular, on the image modeling benchmarks, PCs achieve competitive performance against some of the widely-used deep generative models, including variational autoencoders and flow-based models, opening up new avenues for tractable generative modeling. Our code can be found at https://github.com/UCLA-StarAI/LVD.}, author={Liu, Anji and Zhang, Honghua and Broeck, Guy Van den}, year={2022}, month=sep, language={en} }
@article{Xu_Luo_2021, title={Human action recognition based on mixed gaussian hidden markov model}, volume={336}, rights={https://creativecommons.org/licenses/by/4.0/}, ISSN={2261-236X}, DOI={10.1051/matecconf/202133606004}, abstractNote={Human action recognition is a challenging field in recent years. Many traditional signal processing and machine learning methods are gradually trying to be applied in this field. This paper uses a hidden Markov model based on mixed Gaussian to solve the problem of human action recognition. The model treats the observed human actions as samples which conform to the Gaussian mixture model, and each Gaussian mixture model is determined by a state variable. The training of the model is the process that obtain the model parameters through the expectation maximization algorithm. The simulation results show that the Hidden Markov Model based on the mixed Gaussian distribution can perform well in human action recognition.}, note={4 citations (Crossref) [2024-12-08]}, journal={MATEC Web of Conferences}, author={Xu, Jiawei and Luo, Qian}, editor={Barukčić, I.}, year={2021}, pages={06004}, language={en} }
@article{Liu_Wang_2017, title={Decoding Chinese stock market returns: Three-state hidden semi-Markov model}, volume={44}, ISSN={0927-538X}, DOI={10.1016/j.pacfin.2017.06.007}, abstractNote={In this paper, we employ a three-state hidden semi-Markov model (HSMM) to explain the time-varying distribution of the Chinese stock market returns since 2005. Our results indicate that the time-varying distribution depends on the hidden states, which are represented by three market conditions, namely the bear, sidewalk, and bull markets. We find that the inflation, the PMI, and the exchange rate are significantly related to the market conditions in China. A simple trading strategy based on expanding window decoding shows profitability with a Sharpe ratio of 1.14.}, journal={Pacific-Basin Finance Journal}, author={Liu, Zhenya and Wang, Shixuan}, year={2017}, month=sep, pages={127–149}, language={en} }
