{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"../../thu_sigs_logo.png\" alt=\"清华深研院-横\" style=\"zoom:50%;\" />"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "vscode": {
     "languageId": "raw"
    }
   },
   "source": [
    "---\n",
    "title: \"Expectation–maximization 算法的深入理解\"\n",
    "subtitle: \"大数据机器学习课程第八次作业\"\n",
    "author: \"叶璨铭 (2024214500) \\n ycm24@mails.tsinghua.edu.cn\"\n",
    "date: \"2024-12-01\"\n",
    "toc: true\n",
    "number-sections: true\n",
    "highlight-style: pygments\n",
    "date-format: full\n",
    "lang: zh\n",
    "bibliography: [../../references.bib]\n",
    "format: \n",
    "  html:\n",
    "    code-fold: false\n",
    "  gfm: default\n",
    "  docx: default\n",
    "jupyter: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-12T15:21:13.204845Z",
     "start_time": "2024-11-12T15:21:13.201287Z"
    }
   },
   "outputs": [],
   "source": [
    "#| hide\n",
    "#| default_exp expectation_maximization.vis\n",
    "# pdf:\n",
    "#   toc: true\n",
    "#   docx: default"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#|hide\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'logger' from 'scholarly_infrastructure' (/home/ye_canming/repos/novelties/cv/ScholarlyInfrastructure/scholarly_infrastructure/__init__.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[3], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mscholarly_infrastructure\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m logger, \u001b[38;5;28mprint\u001b[39m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mthu_big_data_ml\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mhelp\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m plt, pio\n\u001b[1;32m      3\u001b[0m pio\u001b[38;5;241m.\u001b[39mrenderers\u001b[38;5;241m.\u001b[39mdefault \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnotebook\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'logger' from 'scholarly_infrastructure' (/home/ye_canming/repos/novelties/cv/ScholarlyInfrastructure/scholarly_infrastructure/__init__.py)"
     ]
    }
   ],
   "source": [
    "from scholarly_infrastructure import logger, print\n",
    "from thu_big_data_ml.help import plt, pio\n",
    "pio.renderers.default = \"notebook\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\n",
       "Renderers configuration\n",
       "-----------------------\n",
       "    Default renderer: \u001b[32m'notebook'\u001b[0m\n",
       "    Available renderers:\n",
       "        \u001b[1m[\u001b[0m\u001b[32m'plotly_mimetype'\u001b[0m, \u001b[32m'jupyterlab'\u001b[0m, \u001b[32m'nteract'\u001b[0m, \u001b[32m'vscode'\u001b[0m,\n",
       "         \u001b[32m'notebook'\u001b[0m, \u001b[32m'notebook_connected'\u001b[0m, \u001b[32m'kaggle'\u001b[0m, \u001b[32m'azure'\u001b[0m, \u001b[32m'colab'\u001b[0m,\n",
       "         \u001b[32m'cocalc'\u001b[0m, \u001b[32m'databricks'\u001b[0m, \u001b[32m'json'\u001b[0m, \u001b[32m'png'\u001b[0m, \u001b[32m'jpeg'\u001b[0m, \u001b[32m'jpg'\u001b[0m, \u001b[32m'svg'\u001b[0m,\n",
       "         \u001b[32m'pdf'\u001b[0m, \u001b[32m'browser'\u001b[0m, \u001b[32m'firefox'\u001b[0m, \u001b[32m'chrome'\u001b[0m, \u001b[32m'chromium'\u001b[0m, \u001b[32m'iframe'\u001b[0m,\n",
       "         \u001b[32m'iframe_connected'\u001b[0m, \u001b[32m'sphinx_gallery'\u001b[0m, \u001b[32m'sphinx_gallery_png'\u001b[0m\u001b[1m]\u001b[0m"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| hide\n",
    "import plotly.io as pio\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "# pio.renderers.default # 确保是 default\n",
    "# pio.renderers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "::: {.callout-important}\n",
    "本文档具有一定的交互性，建议使用浏览器打开html文件，这样比pdf文件阅读体验更佳。\n",
    ":::"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 第一题——一个例子理解 维特比 算法求解 HMM 模型的最优路径 {#sec-1}\n",
    "\n",
    "> 给定盒子和球组成的隐马尔可夫模型$\\lambda = (A, B, \\pi)$，其中，\n",
    "> \n",
    "> $ A = \\begin{bmatrix} 0.5 & 0.2 & 0.3 \\\\ 0.3 & 0.5 & 0.2 \\\\ 0.2 & 0.3 & 0.5 \\end{bmatrix}, B = \\begin{bmatrix} 0.5 & 0.5 \\\\ 0.4 & 0.6 \\\\ 0.7 & 0.3 \\end{bmatrix}, \\pi = (0.2, 0.4, 0.4)^T $\n",
    "> \n",
    "> 试用维特比算法求最优路径$I^* = (i_1^*, i_2^*, i_3^*, i_4^*)$。\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 审题 {#sec-1-analysis}\n",
    "\n",
    "我们首先复习一下李航书上的内容和课件上的内容。\n",
    "\n",
    "- 隐马尔可夫模型的模型是什么？\n",
    "- 隐马尔可夫模型的三个基本问题是什么？\n",
    "- 除了上面三个问题，如果HMM用于时序预测又是怎么做的？\n",
    "- HMM和EM算法是怎么关联起来的？\n",
    "- \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "复习之后，我们来看看题目询问的问题。\n",
    "\n",
    "首先 数据 如下"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import treescope\n",
    "treescope.basic_interactive_setup(autovisualize_arrays=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
      ],
      "text/plain": [
       "\u001b[1m<\u001b[0m\u001b[1;95mIPython.core.display.HTML\u001b[0m\u001b[39m object\u001b[0m\u001b[1m>\u001b[0m"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style=\"display:none\"> <script type=\"application/octet-stream\" ></script> <treescope-run-here><script type=\"application/octet-stream\"> const root = ( Array.from(document.getElementsByClassName( \"treescope_out_c3cb26a0733342d3847107d03ea47862\")) .filter((elt) => !elt.dataset['step1']) )[0]; root.dataset['step1'] = 1; root.defns.insertContent( this.parentNode.querySelector('script[type=\"application/octet-stream\"]'), true ); this.parentNode.remove(); </script></treescope-run-here> </div>"
      ],
      "text/plain": [
       "\u001b[1m<\u001b[0m\u001b[1;95mIPython.core.display.HTML\u001b[0m\u001b[39m object\u001b[0m\u001b[1m>\u001b[0m"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<treescope-run-here><script type=\"application/octet-stream\"> const root = ( Array.from(document.getElementsByClassName( \"treescope_out_c3cb26a0733342d3847107d03ea47862\")) .filter((elt) => !elt.dataset.stolen) )[0]; root.dataset.stolen = 1; this.parentNode.replaceChild(root, this); </script></treescope-run-here>"
      ],
      "text/plain": [
       "\n",
       "\u001b[1m(\u001b[0m\n",
       "    \u001b[1;35marray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m\u001b[1m[\u001b[0m\u001b[1;36m0.5\u001b[0m, \u001b[1;36m0.2\u001b[0m, \u001b[1;36m0.3\u001b[0m\u001b[1m]\u001b[0m,\n",
       "       \u001b[1m[\u001b[0m\u001b[1;36m0.3\u001b[0m, \u001b[1;36m0.5\u001b[0m, \u001b[1;36m0.2\u001b[0m\u001b[1m]\u001b[0m,\n",
       "       \u001b[1m[\u001b[0m\u001b[1;36m0.2\u001b[0m, \u001b[1;36m0.3\u001b[0m, \u001b[1;36m0.5\u001b[0m\u001b[1m]\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m,\n",
       "    \u001b[1;35marray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m\u001b[1m[\u001b[0m\u001b[1;36m0.5\u001b[0m, \u001b[1;36m0.5\u001b[0m\u001b[1m]\u001b[0m,\n",
       "       \u001b[1m[\u001b[0m\u001b[1;36m0.4\u001b[0m, \u001b[1;36m0.6\u001b[0m\u001b[1m]\u001b[0m,\n",
       "       \u001b[1m[\u001b[0m\u001b[1;36m0.7\u001b[0m, \u001b[1;36m0.3\u001b[0m\u001b[1m]\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m,\n",
       "    \u001b[1;35marray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m\u001b[1;36m0.2\u001b[0m, \u001b[1;36m0.4\u001b[0m, \u001b[1;36m0.4\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",
       "\u001b[1m)\u001b[0m"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "# 定义转移概率矩阵 A\n",
    "A = np.array([[0.5, 0.2, 0.3],\n",
    "              [0.3, 0.5, 0.2],\n",
    "              [0.2, 0.3, 0.5]])\n",
    "\n",
    "# 定义观测概率矩阵 B\n",
    "B = np.array([[0.5, 0.5],\n",
    "              [0.4, 0.6],\n",
    "              [0.7, 0.3]])\n",
    "\n",
    "# 定义初始状态概率向量 pi\n",
    "pi = np.array([0.2, 0.4, 0.4])\n",
    "\n",
    "A, B, pi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "接下来尝试使用 维特比算法 来尝试求解这个问题。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 解题 {#sec-1-solution}\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 解法二：使用Python和机器学习库（科研使用）\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "首先我们需要调查，哪些Python库可以实现HMM模型，并且支持解码问题。\n",
    "\n",
    "1. 如果把HMM看做是机器学习模型，对应的机器学习库有没有支持HMM的呢？\n",
    "\n",
    "我们最熟悉的sklearn库曾经是有HMM模型的，然而根据其[文档](https://scikit-learn.sourceforge.net/stable/modules/hmm.html)，由于HMM模型和其他sklearn模型的API有所不同，为了让项目更加专注，曾经的代码迁移到了 hmmlearn 库下，原本的sklearn已经移除了对应的支持，新库的链接为 https://github.com/hmmlearn/hmmlearn。\n",
    "然而我们注意到，这个库并不是很活跃，与 https://github.com/larsmans/seqlearn 一样已经很久没有更新了。\n",
    "\n",
    "2. 我们如果把HMM看做是时间序列的模型，那么对应的库有没有支持HMM的呢？\n",
    "\n",
    "我们可以考虑使用[sktime库](https://github.com/sktime/sktime), 这个库明显更加活跃，最新的更新在一天之内。sktime在时序模型上对sklearn的扩展，支持多种时序任务。\n",
    "\n",
    "本题我们的任务不是 Forecasting，而是 sktime中称作 [Annotation](https://sktime-backup.readthedocs.io/en/v0.28.1/api_reference/auto_generated/sktime.annotation.hmm.HMM.html) 或者 [Detection](https://www.sktime.net/en/stable/api_reference/auto_generated/sktime.annotation.hmm.HMM.html) 的任务，在李航书里面叫做Tagging。 这些不同的叫法都是一个意思，找到已知模型参数和观测序列下，最大概率的状态序列。\n",
    "\n",
    "另一个达到SOTA时间序列性能的库 AutoGluon Time Series, [支持了很多模型](https://auto.gluon.ai/dev/tutorials/timeseries/forecasting-model-zoo.html)，然而并不支持HMM模型。这个库主要的focus在于时序预测forecast的性能，因而并没有支持HMM。\n",
    "\n",
    "3. 如果把HMM看做是简单的深度学习模型，深度学习库是否支持HMM？\n",
    "\n",
    "那么我们最喜欢的PyTorch库，是否支持GPU上的HMM模型呢？看起来，确实是可以实现的，不过这些库主要是出于教育目的。\n",
    "- https://github.com/nwams/Hidden_Markov_Model-in-PyTorch/blob/master/Hidden%20Markov%20Models%20in%20PyTorch.ipynb\n",
    "- https://github.com/lorenlugosch/pytorch_HMM\n",
    "\n",
    "4. 如果把HMM看做是贝叶斯网络，[一个概率图模型](https://github.com/lorenlugosch/pytorch_HMM)，一个EM算法的使用案例，那么是否有做这方面的库？\n",
    "答案是肯定的。\n",
    "首先我们了解一下，概率建模有关的Python库有哪些？\n",
    "\n",
    "- Pyro：基于Python和PyTorch的概率编程库，采用随机变分推理技术，适用于处理复杂的模型和大规模数据集。\n",
    "\n",
    "- PyMC3：Python包用于贝叶斯统计建模，专注于高级MCMC和变分推断算法，适用于一系列问题。\n",
    "\n",
    "- Edward：由Google开发的基于TensorFlow的概率编程库，用于概率建模和不确定性量化。\n",
    "\n",
    "- Stan：开源项目用于贝叶斯统计建模和概率编程，允许用户编写模型，并使用MCMC等方法进行拟合。\n",
    "\n",
    "- Pomegranate：功能强大且易于使用的概率建模工具包，支持多种模型，包括隐马尔可夫模型。\n",
    "\n",
    "- pgmpy：这是一个Python库，用于构建和操作概率图模型（PGMs），包括贝叶斯网络和马尔可夫随机场。它提供参数学习、推理（包括精确和近似推理）以及模型可视化等功能。\n",
    "\n",
    "- pyAgrum：pyAgrum是C++库aGrUM的Python接口，专注于贝叶斯网络和其他概率图模型。它支持创建、建模、学习、使用、计算和嵌入贝叶斯网络等任务，同时提供了一些特有的Python和C++代码以简化和扩展aGrUM API。\n",
    "\n",
    "- Dynamax：这是一个允许轻松定义状态空间模型的库。使用Dynamax，可以进行最大似然估计或使用Blackjax进行MCMC全贝叶斯后验估计。\n",
    "\n",
    "- Blackjax：这是一个基于JAX的概率库，用于贝叶斯推断，特别是使用哈密顿蒙特卡洛（HMC）或序贯蒙特卡洛（SMC）方法计算参数后验。\n",
    "\n",
    "以上的库大多数都支持HMM模型。 jax是个Google开发的现代基础张量计算库，速度相比numpy和PyTorch都非常快。我们来尝试 Dynamax。\n",
    "\n",
    "```python\n",
    "pip install dynamax\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The history saving thread hit an unexpected error (OperationalError('database or disk is full')).History will not be written to the database.\n"
     ]
    },
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'dynamax'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[9], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mdynamax\u001b[39;00m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'dynamax'"
     ]
    }
   ],
   "source": [
    "import dynamax"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 解法一：手工推导法（考试写解答题）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 第一轮迭代，我们有初始的参数值 $\\theta_1 = (\\pi_1, p_1, q_1)$\n",
    "\n",
    "假如这个参数值当做真的参数值，我们可以算什么呢？\n",
    "\n",
    "- 不完全数据的对数似然函数 $logP(X|\\theta_1)$ 是可以计算的，虽然我们不能得到解析解，但是这个似然的值至少是可以计算的，可以知道我们现在这个参数估计的好不好。\n",
    "- 如果我们有Z的具体值 (也就是每一个样本 $x_i$ 是来自硬币B还是C)，完全数据的 $logP(X, Z|\\theta_1)$就能算出一个值，不过我们自然是没有 Z 的具体值，否则 $logP(X, Z|\\theta)$ 可以直接极大似然估计$\\theta$了。\n",
    "- 但是我们有$\\theta_1$, 而且我们有 $P(Z|X, \\theta_1)$的计算公式，所以我们是可以估算出来，每一个样本 $x_i$ 既然等于1或者0，那么在我的$\\theta_1$ 下 它来自Z的概率是多少。\n",
    "\n",
    "--- \n",
    "\n",
    "所以我们首先来计算此概率。Z 无非 取值 1, 0 (硬币B,硬币C)， 所以根据贝叶斯公式\n",
    "\n",
    "<!-- $$P(Z=1|X=x_i, \\theta_1) = \\eta P(X=x_i | Z=1, \\theta_1) \\times P(Z=1| \\theta_1) = p_1^{x_i}(1-p_1)^{1-x_i} \\times \\pi_1$$ -->\n",
    "$$\n",
    "\\begin{align}\n",
    "P(Z=1|X=x_i, \\theta_1) &= \\eta P(X=x_i | Z=1, \\theta_1) \\times P(Z=1| \\theta_1) \\\\\n",
    "&= \\eta p_1^{x_i}(1-p_1)^{1-x_i} \\times \\pi_1\n",
    "\\end{align}\n",
    "$$\n",
    "同理 $P(Z=1|X=x_i, \\theta_1) = \\eta q_1^{x_i}(1-q_1)^{1-x_i} \\times (1-\\pi_1)$\n",
    "\n",
    "这个式子和 李航《统计学习方法》 9.5 式一致，我们使用了 $\\eta$ 表示归一化参数, 也就是贝叶斯公式的分母。其中注意 $p_1^{x_i}(1-p_1)^{1-x_i}$ 无非就是 伯努利分布的概率密度函数，实际上是把 $x_i=0$ 和 $x_i=1$的情况合并在一起表示。\n",
    "\n",
    "---\n",
    "\n",
    "我们代入数值计算一下，按照上面列出的公式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\n",
       "\u001b[1;35marray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m\u001b[1;36m0.41151594\u001b[0m, \u001b[1;36m0.41151594\u001b[0m, \u001b[1;36m0.53738318\u001b[0m, \u001b[1;36m0.41151594\u001b[0m, \u001b[1;36m0.53738318\u001b[0m,\n",
       "       \u001b[1;36m0.53738318\u001b[0m, \u001b[1;36m0.41151594\u001b[0m, \u001b[1;36m0.53738318\u001b[0m, \u001b[1;36m0.41151594\u001b[0m, \u001b[1;36m0.41151594\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_p_z_given_x_theta(X, pi, p, q):\n",
    "    p_z_eq1_given_x_theta = (p**X) * ((1-p)**(1-X)) * pi\n",
    "    p_z_eq0_given_x_theta = (q**X) * ((1-q)**(1-X)) * (1-pi)\n",
    "    eta = 1/ (p_z_eq1_given_x_theta + p_z_eq0_given_x_theta)\n",
    "    p_z_eq1_given_x = eta * p_z_eq1_given_x_theta\n",
    "    p_z_eq0_given_x = eta * p_z_eq0_given_x_theta\n",
    "    return p_z_eq1_given_x, p_z_eq0_given_x\n",
    "p_z_eq1_given_x, p_z_eq0_given_x = get_p_z_given_x_theta(X, pi, p, q)\n",
    "p_z_eq1_given_x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "上面的值意味着给定参数$\\theta_1$时，每一个样本是被 硬币 B 得到的概率。\n",
    "考试的时候，我们不需要每一个样本$x_i$都算一次，因为 $x_i$ 无非是0或1，我们只需要计算 $P(Z=1|X=0, \\theta_1)$ 和 $P(Z=1|X=1, \\theta_1)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "---\n",
    "\n",
    "李航书上说这就完成了 **Expectation Step**，对于硬币这个混合伯努利分布模型确实到这一步可以算下一步 Maximization 了，但是我们这里把概念搞清楚一点。EM算法所求解的是Q函数，也就是一个期望，不只是 Z 的概率分布。\n",
    "\n",
    "具体这个期望是谁的期望呢？要说明一个期望，第一需要知道采样这个期望的概率分布是什么分布，第二要知道期望想要知道的函数值是什么。\n",
    "我们简单复习一下概率论的知识\n",
    "<img src=\"image.png\" alt=\"alt text\" style=\"width: 30%;\" />\n",
    "本来期望的定义是对一个随机变量而言的，但是因为有这个基本公式，只要是另外一个随机变量是原本随机变量的函数关系，就可以用原本的随机变量的分布来采样函数值，得到目标随机变量的期望。\n",
    "\n",
    "对于EM算法而言，经过Jensen不等式的推导，我们感兴趣的期望是$E(logP(Y, Z| \\theta))$ 也就是 完全数据的对数使然函数，然后因为我们没有Z的确切值但是有Z的估计分布，所以我们可以用这个分布去采样，也就是关注的重点在于 $Q(\\theta, \\theta_i) = E_{Z|Y, \\theta_i}(logP(Y, Z| \\theta) | Y, \\theta_i)$。\n",
    "\n",
    "注意这里这个式子的概率论符号我认为是很有必要进行解释的，否则我们都无法知道我们到底在讨论什么。\n",
    "\n",
    "- 首先 $Q(\\theta, \\theta_i)$的意思是右边这个式子中间内部使用了一些变量，但是这些变量最后都和最后的值无关，比如说被求和和积分“积掉了（reduce了）”，最后只有 $\\theta_i$ （上一轮的参数估计值或者第一轮的先验）和变量$\\theta$决定右边式子的值，据此下一步 Maximization 才能够优化 $\\theta$ 。\n",
    "\n",
    "- $E_{Z|Y, \\theta_i}$, 下标代表用来估计期望的密度函数，李航书上写的是 $E_{Z}$，这个是指用来采样用的那个随机变量是Z，我们表达的更加精确，我们说的是密度函数是我们上面求出的 $P(Z|Y, \\theta_i)$。 括号内的 $| Y, \\theta_i)$ 竖线表示 **条件期望**，也是决定用来估计期望的密度函数的一个表示方法。\n",
    "\n",
    "\n",
    "<img src=\"image-1.png\" alt=\"alt text\" style=\"width: 30%;\" />\n",
    "\n",
    "--- \n",
    "\n",
    "那为什么李航书上我们没有继续去求 $Q(\\theta, \\theta_i)$, 而是在 $P(Z|Y, \\theta_i)$ 戛然而止了呢？\n",
    "\n",
    "这是因为我们在**作业1** 已经详细推导过了 伯努利分布模型的 极大似然估计和贝叶斯估计，我们知道结论是什么，我们不需要再次推导一遍（还是稍有区别，因为Z不是固定值而是分布）。\n",
    "\n",
    "我们已经知道 有了 $P(Z|Y, \\theta_i)$ 的情况下，极大 $E_{Z|Y, \\theta_i}(logP(Y, Z| \\theta) | Y, \\theta_i)$ 估计的结果，所以我们可以直接进入到 **Maximization Step**\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "首先极大似然估计 $\\pi_{i+1}$ 这个硬币A伯努利分布的参数，如果Z是固定值，极大似然估计无非就是看看有多少个1多少个0，计算个频率即可，贝叶斯估计无非就是增加一个Beta分布的先验，先验的多几个1和0的统计结果罢了。现在Z是 $P(Z|Y, \\theta_i)$，经过李航书上省略的推导，要最大化Expectation Step的期望，本质上无非就是计算频率的时候用Z的概率值来加权计算。所以\n",
    "$$\\pi_{i+1} = \\frac{1}{N} \\sum_{j=1}^{N} P(Z=1|X=x_j, \\theta_i) $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\u001b[1;36m0.23460000000000006\u001b[0m"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi = p_z_eq1_given_x_theta.mean()\n",
    "pi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "而p也是伯努利分布，表示B硬币的正面概率，如果你告诉我X数据里面哪些值是B抛出了，极大似然估计无非就是这个X数据的子集里面，0有多少个，1有多少个。但是我当然不知道Z的具体分配，我只有Z的估计的分布。李航书上再次省略了推导，但是很容易理解，如果我们要找到一个p最大化期望，本质上无非就是整个X我都统计0和1，不过每一个x_i的频率贡献是根据Z的概率值贡献加权的。所以\n",
    "\n",
    "$$p_{i+1} = \\frac{\\sum_{j=1}^{N} P(Z=1|X=x_j, \\theta_i) \\cdot x_j}{ \\sum_{j=1}^{N} P(Z=1|X=x_j, \\theta_i)}  $$\n",
    "\n",
    "同理\n",
    "\n",
    "$$q_{i+1} = \\frac{\\sum_{j=1}^{N} P(Z=0|X=x_j, \\theta_i) \\cdot x_j}{ \\sum_{j=1}^{N} P(Z=0|X=x_j, \\theta_i)}  $$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\u001b[1m(\u001b[0m\u001b[1;36m0.6470588235294118\u001b[0m, \u001b[1;36m0.7528089887640449\u001b[0m\u001b[1m)\u001b[0m"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = sum(p_z_eq1_given_x_theta* X)/ sum(p_z_eq1_given_x_theta)\n",
    "q = sum(p_z_eq0_given_x_theta* X)/ sum(p_z_eq0_given_x_theta)\n",
    "p, q"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 第二轮迭代\n",
    "同理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\u001b[1m(\u001b[0m\u001b[1;36m0.23460000000000006\u001b[0m, \u001b[1;36m0.6470588235294118\u001b[0m, \u001b[1;36m0.7528089887640449\u001b[0m\u001b[1m)\u001b[0m"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_z_eq1_given_x, p_z_eq0_given_x = get_p_z_given_x_theta(X, pi, p, q)\n",
    "pi = p_z_eq1_given_x_theta.mean()\n",
    "p = sum(p_z_eq1_given_x_theta* X)/ sum(p_z_eq1_given_x_theta)\n",
    "q = sum(p_z_eq0_given_x_theta* X)/ sum(p_z_eq0_given_x_theta)\n",
    "pi, p, q"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "我们发现我们已经获得了一个稳定的解，$\\pi, p, q$已经稳定，收敛到到了局部最优值，因而EM算法结束。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 第二题——混合高斯分布上使用 EM 算法{#sec-2}\n",
    "\n",
    "题目如下\n",
    "> 已知观测数据 -67, -48, 6, 8, 14, 16, 23, 24, 28, 29, 41, 49, 56, 60, 75，试估计两个分量的高斯混合模型的5个参数。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 审题"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.figure_factory as ff\n",
    "from nbdev.showdoc import show_doc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"566f94ff-dba1-4e1d-81f3-9f83df7e46c2\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"566f94ff-dba1-4e1d-81f3-9f83df7e46c2\")) {                    Plotly.newPlot(                        \"566f94ff-dba1-4e1d-81f3-9f83df7e46c2\",                        [{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"x=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[-67,-48,6,8,14,16,23,24,28,29,41,49,56,60,75],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"x=%{x}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"\",\"notched\":true,\"offsetgroup\":\"\",\"showlegend\":false,\"x\":[-67,-48,6,8,14,16,23,24,28,29,41,49,56,60,75],\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"x\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.8316],\"title\":{\"text\":\"count\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.0,1.0],\"matches\":\"x\",\"showticklabels\":false,\"showgrid\":true},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.8416,1.0],\"matches\":\"y2\",\"showticklabels\":false,\"showline\":false,\"ticks\":\"\",\"showgrid\":false},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('566f94ff-dba1-4e1d-81f3-9f83df7e46c2');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 已知观测数据\n",
    "data = np.array([-67, -48, 6, 8, 14, 16, 23, 24, 28, 29, 41, 49, 56, 60, 75])\n",
    "fig = px.histogram(x=data, \n",
    "                   marginal=\"box\", # or violin, rug\n",
    "        )\n",
    "# hist_data = [data]\n",
    "# group_labels = ['distplot'] # name of the dataset\n",
    "\n",
    "# fig = ff.create_distplot(hist_data, group_labels)\n",
    "fig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 解题 {#sec-2-solution}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 解法一：手工推导法（考试写解答题）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "上一题我们已经详细解释了EM算法，使用EM算法估计了 混合伯努利分布。\n",
    "\n",
    "这一题是混合高斯分布，其实混合高斯分布的EM的公式是类似的，这一题两个分量也就是上一题的硬币A，我们也是先计算每一个样本属于哪个分量的概率  $P(Z|Y, \\theta_i)$，然后使用概率作为加权，去极大似然估计参数 $\\pi$。估计$\\pi$的公式和上面完全一样，因为是伯努利分布。\n",
    "\n",
    "而估计两个分量的高斯分布的参数的公式则和上面有所不同。高斯分布的极大似然估计，无非就是计算数据子集的均值和方差。而在EM当中，我们需要推导怎么极大化 Q函数，实际上对于高斯混合分布，和伯努利混合分布类似，得到的结论无非就是 以概率 $P(Z|Y, \\theta_i)$ 加权 计算均值和方差。\n",
    "\n",
    "由于上一题我们已经手算推导过，我们这一题不再重复，而是来探究一下**解法二：使用Python和机器学习库**，我们这一题来探究一下，在现实科研场景下，我们怎么使用EM算法，以混合高斯分布为例。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 解法二：使用Python和机器学习库（科研使用）\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "我们使用sklearn来使用EM算法来对高斯混合模型进行训练。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.mixture import GaussianMixture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[0;31mInit signature:\u001b[0m\n",
      "\u001b[0mGaussianMixture\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mn_components\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mcovariance_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'full'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mtol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.001\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mreg_covar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-06\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mn_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0minit_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'kmeans'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mweights_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mmeans_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mprecisions_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mwarm_start\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mverbose_interval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mDocstring:\u001b[0m     \n",
      "Gaussian Mixture.\n",
      "\n",
      "Representation of a Gaussian mixture model probability distribution.\n",
      "This class allows to estimate the parameters of a Gaussian mixture\n",
      "distribution.\n",
      "\n",
      "Read more in the :ref:`User Guide <gmm>`.\n",
      "\n",
      ".. versionadded:: 0.18\n",
      "\n",
      "Parameters\n",
      "----------\n",
      "n_components : int, default=1\n",
      "    The number of mixture components.\n",
      "\n",
      "covariance_type : {'full', 'tied', 'diag', 'spherical'}, default='full'\n",
      "    String describing the type of covariance parameters to use.\n",
      "    Must be one of:\n",
      "\n",
      "    - 'full': each component has its own general covariance matrix.\n",
      "    - 'tied': all components share the same general covariance matrix.\n",
      "    - 'diag': each component has its own diagonal covariance matrix.\n",
      "    - 'spherical': each component has its own single variance.\n",
      "\n",
      "tol : float, default=1e-3\n",
      "    The convergence threshold. EM iterations will stop when the\n",
      "    lower bound average gain is below this threshold.\n",
      "\n",
      "reg_covar : float, default=1e-6\n",
      "    Non-negative regularization added to the diagonal of covariance.\n",
      "    Allows to assure that the covariance matrices are all positive.\n",
      "\n",
      "max_iter : int, default=100\n",
      "    The number of EM iterations to perform.\n",
      "\n",
      "n_init : int, default=1\n",
      "    The number of initializations to perform. The best results are kept.\n",
      "\n",
      "init_params : {'kmeans', 'k-means++', 'random', 'random_from_data'},     default='kmeans'\n",
      "    The method used to initialize the weights, the means and the\n",
      "    precisions.\n",
      "    String must be one of:\n",
      "\n",
      "    - 'kmeans' : responsibilities are initialized using kmeans.\n",
      "    - 'k-means++' : use the k-means++ method to initialize.\n",
      "    - 'random' : responsibilities are initialized randomly.\n",
      "    - 'random_from_data' : initial means are randomly selected data points.\n",
      "\n",
      "    .. versionchanged:: v1.1\n",
      "        `init_params` now accepts 'random_from_data' and 'k-means++' as\n",
      "        initialization methods.\n",
      "\n",
      "weights_init : array-like of shape (n_components, ), default=None\n",
      "    The user-provided initial weights.\n",
      "    If it is None, weights are initialized using the `init_params` method.\n",
      "\n",
      "means_init : array-like of shape (n_components, n_features), default=None\n",
      "    The user-provided initial means,\n",
      "    If it is None, means are initialized using the `init_params` method.\n",
      "\n",
      "precisions_init : array-like, default=None\n",
      "    The user-provided initial precisions (inverse of the covariance\n",
      "    matrices).\n",
      "    If it is None, precisions are initialized using the 'init_params'\n",
      "    method.\n",
      "    The shape depends on 'covariance_type'::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "random_state : int, RandomState instance or None, default=None\n",
      "    Controls the random seed given to the method chosen to initialize the\n",
      "    parameters (see `init_params`).\n",
      "    In addition, it controls the generation of random samples from the\n",
      "    fitted distribution (see the method `sample`).\n",
      "    Pass an int for reproducible output across multiple function calls.\n",
      "    See :term:`Glossary <random_state>`.\n",
      "\n",
      "warm_start : bool, default=False\n",
      "    If 'warm_start' is True, the solution of the last fitting is used as\n",
      "    initialization for the next call of fit(). This can speed up\n",
      "    convergence when fit is called several times on similar problems.\n",
      "    In that case, 'n_init' is ignored and only a single initialization\n",
      "    occurs upon the first call.\n",
      "    See :term:`the Glossary <warm_start>`.\n",
      "\n",
      "verbose : int, default=0\n",
      "    Enable verbose output. If 1 then it prints the current\n",
      "    initialization and each iteration step. If greater than 1 then\n",
      "    it prints also the log probability and the time needed\n",
      "    for each step.\n",
      "\n",
      "verbose_interval : int, default=10\n",
      "    Number of iteration done before the next print.\n",
      "\n",
      "Attributes\n",
      "----------\n",
      "weights_ : array-like of shape (n_components,)\n",
      "    The weights of each mixture components.\n",
      "\n",
      "means_ : array-like of shape (n_components, n_features)\n",
      "    The mean of each mixture component.\n",
      "\n",
      "covariances_ : array-like\n",
      "    The covariance of each mixture component.\n",
      "    The shape depends on `covariance_type`::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "precisions_ : array-like\n",
      "    The precision matrices for each component in the mixture. A precision\n",
      "    matrix is the inverse of a covariance matrix. A covariance matrix is\n",
      "    symmetric positive definite so the mixture of Gaussian can be\n",
      "    equivalently parameterized by the precision matrices. Storing the\n",
      "    precision matrices instead of the covariance matrices makes it more\n",
      "    efficient to compute the log-likelihood of new samples at test time.\n",
      "    The shape depends on `covariance_type`::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "precisions_cholesky_ : array-like\n",
      "    The cholesky decomposition of the precision matrices of each mixture\n",
      "    component. A precision matrix is the inverse of a covariance matrix.\n",
      "    A covariance matrix is symmetric positive definite so the mixture of\n",
      "    Gaussian can be equivalently parameterized by the precision matrices.\n",
      "    Storing the precision matrices instead of the covariance matrices makes\n",
      "    it more efficient to compute the log-likelihood of new samples at test\n",
      "    time. The shape depends on `covariance_type`::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "converged_ : bool\n",
      "    True when convergence of the best fit of EM was reached, False otherwise.\n",
      "\n",
      "n_iter_ : int\n",
      "    Number of step used by the best fit of EM to reach the convergence.\n",
      "\n",
      "lower_bound_ : float\n",
      "    Lower bound value on the log-likelihood (of the training data with\n",
      "    respect to the model) of the best fit of EM.\n",
      "\n",
      "n_features_in_ : int\n",
      "    Number of features seen during :term:`fit`.\n",
      "\n",
      "    .. versionadded:: 0.24\n",
      "\n",
      "feature_names_in_ : ndarray of shape (`n_features_in_`,)\n",
      "    Names of features seen during :term:`fit`. Defined only when `X`\n",
      "    has feature names that are all strings.\n",
      "\n",
      "    .. versionadded:: 1.0\n",
      "\n",
      "See Also\n",
      "--------\n",
      "BayesianGaussianMixture : Gaussian mixture model fit with a variational\n",
      "    inference.\n",
      "\n",
      "Examples\n",
      "--------\n",
      ">>> import numpy as np\n",
      ">>> from sklearn.mixture import GaussianMixture\n",
      ">>> X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n",
      ">>> gm = GaussianMixture(n_components=2, random_state=0).fit(X)\n",
      ">>> gm.means_\n",
      "array([[10.,  2.],\n",
      "       [ 1.,  2.]])\n",
      ">>> gm.predict([[0, 0], [12, 3]])\n",
      "array([1, 0])\n",
      "\u001b[0;31mFile:\u001b[0m           ~/program_files/managers/conda/envs/yuequ/lib/python3.10/site-packages/sklearn/mixture/_gaussian_mixture.py\n",
      "\u001b[0;31mType:\u001b[0m           ABCMeta\n",
      "\u001b[0;31mSubclasses:\u001b[0m     "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[0;31mInit signature:\u001b[0m\n",
      "\u001b[0mGaussianMixture\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mn_components\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mcovariance_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'full'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mtol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.001\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mreg_covar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-06\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mn_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0minit_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'kmeans'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mweights_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mmeans_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mprecisions_init\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mwarm_start\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m    \u001b[0mverbose_interval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
      "\u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mDocstring:\u001b[0m     \n",
      "Gaussian Mixture.\n",
      "\n",
      "Representation of a Gaussian mixture model probability distribution.\n",
      "This class allows to estimate the parameters of a Gaussian mixture\n",
      "distribution.\n",
      "\n",
      "Read more in the :ref:`User Guide <gmm>`.\n",
      "\n",
      ".. versionadded:: 0.18\n",
      "\n",
      "Parameters\n",
      "----------\n",
      "n_components : int, default=1\n",
      "    The number of mixture components.\n",
      "\n",
      "covariance_type : {'full', 'tied', 'diag', 'spherical'}, default='full'\n",
      "    String describing the type of covariance parameters to use.\n",
      "    Must be one of:\n",
      "\n",
      "    - 'full': each component has its own general covariance matrix.\n",
      "    - 'tied': all components share the same general covariance matrix.\n",
      "    - 'diag': each component has its own diagonal covariance matrix.\n",
      "    - 'spherical': each component has its own single variance.\n",
      "\n",
      "tol : float, default=1e-3\n",
      "    The convergence threshold. EM iterations will stop when the\n",
      "    lower bound average gain is below this threshold.\n",
      "\n",
      "reg_covar : float, default=1e-6\n",
      "    Non-negative regularization added to the diagonal of covariance.\n",
      "    Allows to assure that the covariance matrices are all positive.\n",
      "\n",
      "max_iter : int, default=100\n",
      "    The number of EM iterations to perform.\n",
      "\n",
      "n_init : int, default=1\n",
      "    The number of initializations to perform. The best results are kept.\n",
      "\n",
      "init_params : {'kmeans', 'k-means++', 'random', 'random_from_data'},     default='kmeans'\n",
      "    The method used to initialize the weights, the means and the\n",
      "    precisions.\n",
      "    String must be one of:\n",
      "\n",
      "    - 'kmeans' : responsibilities are initialized using kmeans.\n",
      "    - 'k-means++' : use the k-means++ method to initialize.\n",
      "    - 'random' : responsibilities are initialized randomly.\n",
      "    - 'random_from_data' : initial means are randomly selected data points.\n",
      "\n",
      "    .. versionchanged:: v1.1\n",
      "        `init_params` now accepts 'random_from_data' and 'k-means++' as\n",
      "        initialization methods.\n",
      "\n",
      "weights_init : array-like of shape (n_components, ), default=None\n",
      "    The user-provided initial weights.\n",
      "    If it is None, weights are initialized using the `init_params` method.\n",
      "\n",
      "means_init : array-like of shape (n_components, n_features), default=None\n",
      "    The user-provided initial means,\n",
      "    If it is None, means are initialized using the `init_params` method.\n",
      "\n",
      "precisions_init : array-like, default=None\n",
      "    The user-provided initial precisions (inverse of the covariance\n",
      "    matrices).\n",
      "    If it is None, precisions are initialized using the 'init_params'\n",
      "    method.\n",
      "    The shape depends on 'covariance_type'::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "random_state : int, RandomState instance or None, default=None\n",
      "    Controls the random seed given to the method chosen to initialize the\n",
      "    parameters (see `init_params`).\n",
      "    In addition, it controls the generation of random samples from the\n",
      "    fitted distribution (see the method `sample`).\n",
      "    Pass an int for reproducible output across multiple function calls.\n",
      "    See :term:`Glossary <random_state>`.\n",
      "\n",
      "warm_start : bool, default=False\n",
      "    If 'warm_start' is True, the solution of the last fitting is used as\n",
      "    initialization for the next call of fit(). This can speed up\n",
      "    convergence when fit is called several times on similar problems.\n",
      "    In that case, 'n_init' is ignored and only a single initialization\n",
      "    occurs upon the first call.\n",
      "    See :term:`the Glossary <warm_start>`.\n",
      "\n",
      "verbose : int, default=0\n",
      "    Enable verbose output. If 1 then it prints the current\n",
      "    initialization and each iteration step. If greater than 1 then\n",
      "    it prints also the log probability and the time needed\n",
      "    for each step.\n",
      "\n",
      "verbose_interval : int, default=10\n",
      "    Number of iteration done before the next print.\n",
      "\n",
      "Attributes\n",
      "----------\n",
      "weights_ : array-like of shape (n_components,)\n",
      "    The weights of each mixture components.\n",
      "\n",
      "means_ : array-like of shape (n_components, n_features)\n",
      "    The mean of each mixture component.\n",
      "\n",
      "covariances_ : array-like\n",
      "    The covariance of each mixture component.\n",
      "    The shape depends on `covariance_type`::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "precisions_ : array-like\n",
      "    The precision matrices for each component in the mixture. A precision\n",
      "    matrix is the inverse of a covariance matrix. A covariance matrix is\n",
      "    symmetric positive definite so the mixture of Gaussian can be\n",
      "    equivalently parameterized by the precision matrices. Storing the\n",
      "    precision matrices instead of the covariance matrices makes it more\n",
      "    efficient to compute the log-likelihood of new samples at test time.\n",
      "    The shape depends on `covariance_type`::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "precisions_cholesky_ : array-like\n",
      "    The cholesky decomposition of the precision matrices of each mixture\n",
      "    component. A precision matrix is the inverse of a covariance matrix.\n",
      "    A covariance matrix is symmetric positive definite so the mixture of\n",
      "    Gaussian can be equivalently parameterized by the precision matrices.\n",
      "    Storing the precision matrices instead of the covariance matrices makes\n",
      "    it more efficient to compute the log-likelihood of new samples at test\n",
      "    time. The shape depends on `covariance_type`::\n",
      "\n",
      "        (n_components,)                        if 'spherical',\n",
      "        (n_features, n_features)               if 'tied',\n",
      "        (n_components, n_features)             if 'diag',\n",
      "        (n_components, n_features, n_features) if 'full'\n",
      "\n",
      "converged_ : bool\n",
      "    True when convergence of the best fit of EM was reached, False otherwise.\n",
      "\n",
      "n_iter_ : int\n",
      "    Number of step used by the best fit of EM to reach the convergence.\n",
      "\n",
      "lower_bound_ : float\n",
      "    Lower bound value on the log-likelihood (of the training data with\n",
      "    respect to the model) of the best fit of EM.\n",
      "\n",
      "n_features_in_ : int\n",
      "    Number of features seen during :term:`fit`.\n",
      "\n",
      "    .. versionadded:: 0.24\n",
      "\n",
      "feature_names_in_ : ndarray of shape (`n_features_in_`,)\n",
      "    Names of features seen during :term:`fit`. Defined only when `X`\n",
      "    has feature names that are all strings.\n",
      "\n",
      "    .. versionadded:: 1.0\n",
      "\n",
      "See Also\n",
      "--------\n",
      "BayesianGaussianMixture : Gaussian mixture model fit with a variational\n",
      "    inference.\n",
      "\n",
      "Examples\n",
      "--------\n",
      ">>> import numpy as np\n",
      ">>> from sklearn.mixture import GaussianMixture\n",
      ">>> X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n",
      ">>> gm = GaussianMixture(n_components=2, random_state=0).fit(X)\n",
      ">>> gm.means_\n",
      "array([[10.,  2.],\n",
      "       [ 1.,  2.]])\n",
      ">>> gm.predict([[0, 0], [12, 3]])\n",
      "array([1, 0])\n",
      "\u001b[0;31mFile:\u001b[0m           ~/program_files/managers/conda/envs/yuequ/lib/python3.10/site-packages/sklearn/mixture/_gaussian_mixture.py\n",
      "\u001b[0;31mType:\u001b[0m           ABCMeta\n",
      "\u001b[0;31mSubclasses:\u001b[0m     "
     ]
    }
   ],
   "source": [
    "GaussianMixture?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将数据转换为二维数组，因为根据上面的文档，GMM需要二维输入\n",
    "data_2d = data.reshape(-1, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initialization 0\n",
      "Initialization converged. time lapse 0.21671s\t lower bound -4.73756.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianMixture(n_components=2, random_state=0, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GaussianMixture<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.mixture.GaussianMixture.html\">?<span>Documentation for GaussianMixture</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GaussianMixture(n_components=2, random_state=0, verbose=2)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "GaussianMixture(n_components=2, random_state=0, verbose=2)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 创建GMM模型，指定两个分量\n",
    "gmm = GaussianMixture(n_components=2, \n",
    "                      random_state=0, verbose=2)\n",
    "\n",
    "# 拟合模型\n",
    "gmm.fit(data_2d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "我们看到GMM都还没开始，Initialization的结果就已经让它收敛了，这是因为 GMM 使用了 KMeans的结果来作为初始化。\n",
    "我们再来试试随机初始化。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initialization 0\n",
      "  Iteration 1\t time lapse 0.01017s\t ll change inf\n",
      "  Iteration 2\t time lapse 0.00344s\t ll change 0.00766\n",
      "  Iteration 3\t time lapse 0.00336s\t ll change 0.02146\n",
      "  Iteration 4\t time lapse 0.00226s\t ll change 0.04780\n",
      "  Iteration 5\t time lapse 0.00037s\t ll change 0.04391\n",
      "  Iteration 6\t time lapse 0.00031s\t ll change 0.01010\n",
      "  Iteration 7\t time lapse 0.00032s\t ll change 0.00443\n",
      "  Iteration 8\t time lapse 0.00135s\t ll change 0.00365\n",
      "  Iteration 9\t time lapse 0.00378s\t ll change 0.00317\n",
      "  Iteration 10\t time lapse 0.00309s\t ll change 0.00283\n",
      "  Iteration 11\t time lapse 0.00342s\t ll change 0.00261\n",
      "  Iteration 12\t time lapse 0.00346s\t ll change 0.00253\n",
      "  Iteration 13\t time lapse 0.00258s\t ll change 0.00260\n",
      "  Iteration 14\t time lapse 0.00032s\t ll change 0.00287\n",
      "  Iteration 15\t time lapse 0.00030s\t ll change 0.00348\n",
      "  Iteration 16\t time lapse 0.00041s\t ll change 0.00467\n",
      "  Iteration 17\t time lapse 0.00313s\t ll change 0.00709\n",
      "  Iteration 18\t time lapse 0.00334s\t ll change 0.01260\n",
      "  Iteration 19\t time lapse 0.00326s\t ll change 0.02772\n",
      "  Iteration 20\t time lapse 0.00318s\t ll change 0.05395\n",
      "  Iteration 21\t time lapse 0.00339s\t ll change 0.01015\n",
      "  Iteration 22\t time lapse 0.00117s\t ll change 0.00000\n",
      "Initialization converged. time lapse 0.05644s\t lower bound -4.73756.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianMixture(init_params=&#x27;random&#x27;, n_components=2, random_state=0, verbose=2,\n",
       "                verbose_interval=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GaussianMixture<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.mixture.GaussianMixture.html\">?<span>Documentation for GaussianMixture</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GaussianMixture(init_params=&#x27;random&#x27;, n_components=2, random_state=0, verbose=2,\n",
       "                verbose_interval=1)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "GaussianMixture(init_params='random', n_components=2, random_state=0, verbose=2,\n",
       "                verbose_interval=1)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gmm = GaussianMixture(n_components=2, init_params = \"random\", \n",
    "                      random_state=0, verbose=2, verbose_interval=1)\n",
    "\n",
    "# 拟合模型\n",
    "gmm.fit(data_2d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这一次则是使用了22次迭代，EM算法才收敛。\n",
    "\n",
    "我们来看看模型估计的结果是什么样的。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\n",
       "\u001b[1m(\u001b[0m\n",
       "    \u001b[1;35marray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m\u001b[1;36m0.13317228\u001b[0m, \u001b[1;36m0.86682772\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m,\n",
       "    \u001b[1;35marray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m\u001b[1m[\u001b[0m\u001b[1;36m-57.51107672\u001b[0m\u001b[1m]\u001b[0m,\n",
       "       \u001b[1m[\u001b[0m \u001b[1;36m32.98488751\u001b[0m\u001b[1m]\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m,\n",
       "    \u001b[1;35marray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m\u001b[1m[\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m90.24987868\u001b[0m\u001b[1m]\u001b[0m\u001b[1m]\u001b[0m,\n",
       "\n",
       "       \u001b[1m[\u001b[0m\u001b[1m[\u001b[0m\u001b[1;36m429.45832976\u001b[0m\u001b[1m]\u001b[0m\u001b[1m]\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",
       "\u001b[1m)\u001b[0m"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 提取参数\n",
    "weights = gmm.weights_\n",
    "means = gmm.means_\n",
    "covariances = gmm.covariances_\n",
    "weights, means, covariances"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "mean和covariances就是估计出来的两个高斯分布分量的均值和协方差矩阵，因为这里是一维的，协方差矩阵只有一个元素就是方差。\n",
    "weights则表示这两个分量分别占多少，也就是先抛一枚硬币A决定用哪个分量的这个概率。\n",
    "\n",
    "我们可以可视化一下拟合出来的混合高斯分布，如下所示："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAArAAAAIiCAYAAAAw6vv+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACZ/UlEQVR4nOzdd3hUZfrG8e9k0gsJkAQChBp6FxABkSY2FLCA2BsqroVVf7pid13Xuoquq6666lpxRRQsiEgRLID03lsgJNT0PnN+f5zMhFATmMmZcn+uK9eczJyZcyeE8PDO876vzTAMAxERERERPxFidQARERERkZpQASsiIiIifkUFrIiIiIj4FRWwIiIiIuJXVMCKiIiIiF9RASsiIiIifkUFrIiIiIj4FRWwIiIiIuJXVMCKiIiIiF9RASsiYoFbbrmFjh07UlJSYsn1b7zxRhISEtyfl5SU0LFjR2655ZZay/DUU0+RmppKVlZWrV1TRAKDClgR8SuZmZnceeed9OzZk+joaBo3bszYsWOPKoKaN2+OzWZj/fr1x3ydoUOHYrPZ+OCDD9z3ffDBB9hsNq666qpjPufXX3/FZrPRvHnzYz5+9913ExYWxqFDh456zDAMUlNTGTVqFADx8fEkJCRgt9ur8VV7n91uJyEhgfj4eI+/9po1a3jyySePuj82NpaEhATCwsI8fk0RCWwqYEXEb8ycOZNOnToxc+ZMRo8ezeTJk3nooYdYvnw5Q4cOxeFwVDnfbrfz0UcfHfU6u3btYtasWce8ht1u5+uvvyYnJ+eoxz788MMT5rv88sspLy/nhx9+OOqx5cuXs2vXLi6//HIAXn75ZX799VdCQ0NP+Jq1JTQ0lF9//ZWXX37Z46/9+++/89RTTx11//3338+qVauoV6+ex68pIoFNBayI+IXs7GyuvfZaunXrxpIlS3jwwQe56KKLuPvuu/ntt9/48ssvjxrNPPfcc/noo49wOp1V7v/0008544wzjnmdJk2a0LRpUyZPnlzl/uLiYv73v//Rq1ev42bs378/SUlJTJs27ajHpk2bRnh4OMOGDavulxwwDhw4YHUEEQkwKmBFxC8899xzHDx4kDfeeIO4uLgqj4WHh9O6deujnjN48GAOHDjAzz//7L7PMAw+/PBD90jokQoKCrjqqquOGm399ttvCQsLo2/fvsfNaLfbufTSS5k+fTplZWVVHvvmm28477zz3NmP7EE1DINXXnmFtm3bEh0dTffu3XnhhRfcPbKu9obly5dXed2BAwfSrVu3KvctWrSI66+/nvbt2xMXF0ffvn1ZsGDBcXO7NG/enJEjR1Z5bZvNdtSHa1Tb6XTyxRdfMHz4cFJTU6lfvz6XXXYZGRkZVV7zoYceAnA/39VO8OSTT2Kz2cjOzq7yfXjvvffo2bMnsbGxdOnShRdffJHy8vKjsj7//PPMmzePiy66iISEBDp06HDM0W8RCTwqYEXEL/z+++/06tWLNm3a1Oh5I0aMqFKMLl++nPXr13PxxRcf8/yCggKuvvpq5s2bx7Zt29z3f/TRR4wZM+akk64uv/xycnJymDdvnvu+3bt3s2TJkuMWza7Xv++++xgwYACff/45N9xwA1999RX79++v7pcKQE5ODiNGjCAqKorHH3+cDz74gMLCQs4///xj9uaeyD//+U/mz5/P/PnzmTdvHu3ataNly5ZceumlAMyfP5+77rqLrl278q9//YvnnnuOuXPnMmbMGAzDAOCLL77giiuucJ8/f/58br755uNe8//+7/8YO3YsgwYN4vPPP2fUqFE8+uijXHXVVe7XdPnPf/7DuHHjuOSSS3j//fdxOp1ceeWVx2z/EJHA4hvNVyIiJ7F27VouuuiiKvc5HI4qRY3dbsdms7k/Lyws5Prrr2fUqFG8/vrrxMTE8OGHH3LRRRcdNYrrUlRURJs2bejduzcff/wxjz32GPv37+f7779n4cKFvPbaayfMOWjQIOrWrcu0adMYMmQIYI7e2u12hg8fftznLV26lKioKN588013K8Sf//znE17rWOLj49m+fTsRERHu+6Kiohg2bBjffvst1113XbVfq3Pnzu7jd955hw0bNvDzzz8TGxsLwIABA9i5c2eVa23atIkXX3yRXbt2kZqaSq9evWjcuDEAZ5999gmvt3z5cl555RWefvppHnnkEQCGDRtGs2bNuOGGG/juu++q/McjPDycX375xT2SXVpaypgxY1i0aBFDhw6t9tcpIv5HI7Ai4hecTudRI3DDhg0jLCzM/XF4q4DLueeeS2xsLF9//TUOh4PPPvuMG2+88aTXu/766/noo48wDIPPP/+cdu3a0b1795M+LywsjBEjRjB16lR33m+++YZBgwadcLLSlVdeicPhYNSoUSxYsOCor7UmIiIicDqdLFy4kH//+99MmTIFgJ07d57S623fvp377ruP+++/n/79+x91raKiIn788UdeeeUVli1bdsrXmj17NoZhcOutt1a5/5prriE6Opqffvqpyv1paWlV2jBatmwJwJ49e2p8bRHxLypgRcQvtG/fni1btlS577XXXuOPP/5g6tSpx31eaGgo1157LZ999hnz58+nrKysWhOpxowZw44dO1iyZAlffPEFN910U5XR3RO5/PLL2bFjB2vXrqWw"
     }
    }]
    }
]
}
  